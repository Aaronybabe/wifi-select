#!/bin/bash

#
# wifi-select, tool for easy network connection using netcfg
#
# Licensed under GPL v2
# (C) Ivan N. Veselov <veselov@gmail.com> aka sphynx, 2009
#

. /etc/rc.d/functions
. /usr/lib/network/network

err_append() {
   stat_append " - $*"
}

err() {
   printhl "$*"
}

#
# list network essids along with its encryption type (none/wep/wpa)
# e.g.: platinum=wpa
#       home_network=none
# returns a path to the generated file with networks
#
get_network_list()
{
    [[ -z "$1" ]] && return 1

    ESSIDS=$(mktemp /tmp/essids.XXXXX)

    iwlist $1 scan 2>/dev/null | awk -f $SUBR_DIR/parse-iwlist.awk | sort -t= -nrk3 > $ESSIDS

    # no networks found
    if [[ ! -s $ESSIDS ]]; then
        return 1
    fi

    echo $ESSIDS
    return 0
}

#
# create new generated profile based on parameters passed
# usage: create_profile $essid $interface $security $key(if needed)
# returns path to the created profile
#
create_profile()
{
    ESSID="$1"; INTERFACE="$2"; SECURITY="$3"; KEY="$4"
    PROFILE="$PROFILE_DIR/$ESSID"

    cat >"$PROFILE" <<END_OF_PROFILE
CONNECTION="wireless"
ESSID="$ESSID"
INTERFACE="$INTERFACE"
DESCRIPTION="Automatically generated profile"
SCAN="yes"
IP="dhcp"
TIMEOUT="10"
SECURITY="$SECURITY"
END_OF_PROFILE

    [[ -n "$KEY" ]] && echo "KEY=\"$KEY\"" >> "$PROFILE"

    chmod 644 "$PROFILE"
    echo "$PROFILE"

    return 0
}

#
# find a file from profile directory with specified ESSID
#
get_profile_by_essid()
{
    ESSID="$1"
    [[ -z "$ESSID" ]] && return 1

    # find using grep all the files in $PROFILE_DIR which
    # contains ESSID=$ESSID and take the first filename
    # (also skip vi backup files)
    PROFILE=$(grep -REl "ESSID=[\"']?$ESSID[\"']?" "$PROFILE_DIR" | grep -v '~$' | head -1)

    echo "$PROFILE"
    return 0
}

if [ $(id -u) != 0 ]; then
    err "this script should be run as root."
    exit 1
fi

# check interface parameter
[[ -z "$1" ]] && err "no interface parameter specified" && exit 1
INTERFACE="$1"

# bring interface up explicitly
ifconfig $INTERFACE up

# retrieve path to file with networks and security types
NETWORKS=$(! get_network_list $INTERFACE) && err "no networks found" && exit 1

# add profile availability flags
FLAGGED_NETS=$(mktemp /tmp/networks.XXXXX)
while IFS="=" read net security quality; do
    NET_FILE=$(get_profile_by_essid "$net")
    if [ ! -e "$NET_FILE" ]; then
        flag="-" # profile is not present
    elif grep -q 'Automatically generated' "$NET_FILE"; then
        flag="!" # profile is automatically generated
    else
        flag="*" # profile is handmade
    fi
    echo -e "$net=$flag $security \t ${quality}%"
done < "$NETWORKS" > "$FLAGGED_NETS"

# set IFS variable for dialog to handle spaces in ESSID correctly
# it will be unset later on
IFS=$'=\n'
MENU_ROWS=$(cat $FLAGGED_NETS)
rm $FLAGGED_NETS
SELECT_TEXT="Select the network you wish to use"
LEGEND="Flags description:\n
 * - handmade profile present\n
 ! - profile generated by wifi-select\n
 - - profile absent"
ESSID=$(dialog --menu "$SELECT_TEXT\n$LEGEND" 24 50 12 \
    $MENU_ROWS --stdout)
RESULT=$?
unset IFS

# if any network was selected
if [[ $RESULT = 0 ]]; then
    # find profile or use plain ESSID if profile can't be found
    PROFILE_FILE=$(get_profile_by_essid "$ESSID")
    if [ -z "$PROFILE_FILE" ]; then
        PROFILE="$ESSID"
    else
        PROFILE=$(basename "$PROFILE_FILE")
    fi

    # check whether we have a valid profile for given ESSID
    if [[ $(load_profile "$PROFILE") ]]; then
        # we do NOT have a profile, so create it right now

        # at first, retrieve its security type
        SECURITY=$(sed -n "s/^$ESSID=\(.*\)=.*/\1/p" $NETWORKS)

        # then ask for the security key if needed
        if [[ ! $SECURITY = "none" ]]; then
            KEY=$(dialog --passwordbox \
                "Enter $SECURITY security key for \"$ESSID\"" 10 40 --stdout)
        fi

        # create a new profile
        GEN_PROFILE=$(create_profile "$ESSID" "$INTERFACE" "$SECURITY" "$KEY")
        clear # after dialog
    else
        clear # after dialog
        err "profile for $ESSID already exists, continue using it"
    fi

    rm $NETWORKS # it's not needed anymore

    # let's try to connect
    netcfg2 "$PROFILE"

    # if profile was created but connection did not succeed
    if [[ $? != 0 && -n "$GEN_PROFILE" ]]; then

        # show generated profile
        err "generated profile:\n"
        cat "$GEN_PROFILE"

        # ask if we need to keep generated profile
        echo
        err "do you want to keep generated profile for further editing? [y/N] "
        read -n 1 KEEP
        echo

        [[ "$KEEP" = y ]] || KEEP="n"  # default is 'no'
        if [[ "$KEEP" = n ]]; then
            err "removing generated profile for $ESSID" && rm "$GEN_PROFILE"
        else
            err "keeping generated profile for $ESSID"
        fi

        exit 1
    fi
else
    clear # after dialog
    err "cancelling..."
    rm $NETWORKS
    exit 1
fi

exit 0
