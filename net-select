#!/bin/bash

. /etc/rc.d/functions
. /usr/lib/network/network.subr

err_append() {
   stat_append " - $*"
}

err() {
   printhl "$*"
}

#
# list network essids along with its encryption type (none/wep/wpa)
# e.g.: platinum=wpa
#       home_network=none
# returns a path to the generated file with networks
#
get_network_list()
{
    [[ -z "$1" ]] && return 1

    ESSIDS=$(mktemp /tmp/essids.XXXXX)

    #iwlist $1 scan 2>/dev/null |
    awk -f detect-security.awk essids > $ESSIDS

    # no networks found
    if [[ ! -s $ESSIDS ]]; then
        return 1
    fi

    echo $ESSIDS
    return 0
}

#
# create new generated profile based on parameters passed
# usage: create_profile $essid $interface $security $key(if needed)
# returns path to the created profile
#
create_profile()
{
    ESSID="$1"; INTERFACE="$2"; SECURITY="$3"; KEY="$4"
    PROFILE="$PROFILE_DIR/$ESSID"

    cat >"$PROFILE" <<END_OF_PROFILE
CONNECTION="wireless"
ESSID="$ESSID"
INTERFACE="$INTERFACE"
DESCRIPTION="Automatically generated profile"
SCAN="yes"
IP="dhcp"
TIMEOUT="10"
SECURITY="$SECURITY"
END_OF_PROFILE

    [[ -n "$KEY" ]] && echo "KEY=\"$KEY\"" >> "$PROFILE"

    chmod 644 "$PROFILE"
    echo "$PROFILE"

    return 0
}

# check interface parameter
[[ -z "$1" ]] && err "no interface parameter specified" && exit 1
INTERFACE="$1"

# retrieve path to file with networks and security types
NETWORKS=$(! get_network_list $INTERFACE) && err "no networks found" && exit 1

# set IFS variable for dialog to handle spaces in ESSID correctly
# it will be unset later on
IFS=$'=\n'
MENU_ROWS=$(cat $NETWORKS)
ESSID=$(dialog --menu "Select the network you wish to use" 16 50 8 \
    $MENU_ROWS --stdout)
RESULT=$?
unset IFS

if [ $RESULT = 0 ]; then
    # if any network was selected
    # check whether we have a valid profile for given ESSID
    if [[ $(validate_profile $ESSID) ]]; then
        # we do NOT have a profile, so create it right now

        # at first, retrieve its security type
        SECURITY=$(sed -n "s/^$ESSID=\(.*\)/\1/p" $NETWORKS)

        # then ask for the security key if needed
        if [[ ! $SECURITY = "none" ]]; then
            KEY=$(dialog --passwordbox \
                "Enter $SECURITY security key for \"$ESSID\"" 10 40 --stdout)
        fi

        # create a new profile
        PROFILE=$(create_profile "$ESSID" "$INTERFACE" "$SECURITY" "$KEY")
        clear # after dialog
    else
        clear # after dialog
        err "profile for $ESSID already exists, continue using it"
    fi

    # let's try to connect
    netcfg2 $ESSID

    rm $NETWORKS # not needed anymore

    # if profile was created but connection did not succeed
    if [[ $? != 0 && -n "$PROFILE" ]]; then

        # show generated profile
        err "generated profile:\n"
        cat "$PROFILE"

        # ask if we need to keep generated profile
        echo
        err "do you want to keep generated profile for further editing? [y] "
        read -n 1 KEEP
        echo

        [[ "$KEEP" == "n" ]] || KEEP="y"  # default is 'y'
        if [[ "$KEEP" == "n" ]]; then
            err "removing failed profile $ESSID" && rm "$PROFILE"
        else
            err "keeping failed profile $ESSID"
        fi

        rm $NETWORKS
        exit 1
    fi
else
    clear # after dialog
    err "cancelling..."
    rm $NETWORKS
    exit 1
fi

exit 0
